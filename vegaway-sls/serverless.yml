org: ${env:SLS_ORG} # Define SLS_ORG in .env
service: vegaway-sls
custom:
  guestUserRole: ${file(./YAML/resources/guest-user-role.yml)}
  authUserRole: ${file(./YAML/resources/auth-user-role.yml)}
  cognitoIdentityPool: ${file(./YAML/resources/cognito-identity-pool.yml)}
  cognitoUserPool: ${file(./YAML/resources/cognito-user-pool.yml)}
  cognitoUserPoolClient: ${file(./YAML/resources/cognito-user-pool-client.yml)}
  cognitoIdentityPoolRoleAttachment: ${file(./YAML/resources/cognito-identity-pool-role-attachment.yml)}

provider:
  name: aws
  stage: dev
  runtime: nodejs20.x
  region: eu-north-1
  iam:
    role: ${env:MY_ROLE_ARN} # Define MY_ROLE_ARN in .env
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type
        - Authorization
        - x-api-key
        - x-cognito-auth
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      exposedResponseHeaders:
        - Special-Response-Header
      maxAge: 6000 # In seconds
    authorizers:
      cognitoAuthorizer:
        type: jwt
        identitySource: $request.header.x-cognito-auth
        issuerUrl: !Sub "https://cognito-idp.${self:provider.region}.amazonaws.com/${CognitoUserPool}"
        audience:
          - !Ref CognitoUserPoolClient
functions:
  # CUSTOMER ACTIONS
  getMenu:
    handler: handlers/getMenu.handler
    events:
      - httpApi:
          path: /menu
          method: get
          authorizer: cognitoAuthorizer

  createOrder:
    handler: handlers/createOrder.handler
    events:
      - httpApi:
          path: /orders
          method: post

  getOrderStatus:
    handler: handlers/getOrderStatus.handler
    events:
      - httpApi:
          path: /orders/status
          method: get

  deleteOrder:
    handler: handlers/deleteOrder.handler
    events:
      - httpApi:
          path: /orders
          method: delete

  updateOrder:
    handler: handlers/updateOrder.handler
    events:
      - httpApi:
          path: /orders
          method: put

  # STAFF ACTIONS
  getOrders:
    handler: handlers/getOrders.handler
    events:
      - httpApi:
          path: /staff/orders/{orderType}
          method: get

  updatePendingOrder:
    handler: handlers/updatePendingOrder.handler
    events:
      - httpApi:
          path: /staff/orders/pending
          method: put

  confirmPendingOrder:
    handler: handlers/confirmPendingOrder.handler
    events:
      - httpApi:
          path: /staff/orders/confirm
          method: post

  getInventory:
    handler: handlers/getInventory.handler
    events:
      - httpApi:
          path: /staff/inventory
          method: get

  getStaffMenu:
    handler: handlers/getStaffMenu.handler
    events:
      - httpApi:
          path: /staff/menu
          method: get

  updateMenuItem:
    handler: handlers/updateMenuItem.handler
    events:
      - httpApi:
          path: /staff/menu/items
          method: put

resources:
  Resources:
    # Imported resources first
    CognitoUserPoolClient: ${self:custom.cognitoUserPoolClient}
    CognitoUserPool: ${self:custom.cognitoUserPool}
    CognitoIdentityPool: ${self:custom.cognitoIdentityPool}
    GuestUserRole: ${self:custom.guestUserRole}
    AuthUserRole: ${self:custom.authUserRole}
    CognitoIdentityPoolRoleAttachment: ${self:custom.cognitoIdentityPoolRoleAttachment}

    # DynamoDB Resources
    MenuTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-menu
        AttributeDefinitions:
          - AttributeName: menuId
            AttributeType: S
        KeySchema:
          - AttributeName: menuId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-orders
        AttributeDefinitions:
          - AttributeName: orderStatus
            AttributeType: S
        KeySchema:
          - AttributeName: orderStatus
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
